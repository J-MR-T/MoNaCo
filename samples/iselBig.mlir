module {
  func.func private @giveI8() -> i8 {
    %0 = arith.constant 9 : i8
    return %0 : i8
  }
  func.func private @giveI16() -> i16 {
    %0 = arith.constant 17 : i16
    return %0 : i16
  }
  func.func private @giveI32() -> i32 {
    %0 = arith.constant 33 : i32
    return %0 : i32
  }
  func.func private @giveI64() -> i64 {
    %0 = arith.constant 65 : i64
    return %0 : i64
  }
  func.func private @patternMatchingTest() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest1() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest2() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest3() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest4() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest5() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest6() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest7() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest8() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest9() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest10() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest11() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest12() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest13() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest14() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest15() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest16() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest17() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest18() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest19() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest20() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest21() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest22() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest23() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest24() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest25() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest26() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest27() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest28() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest29() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest30() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest31() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest32() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest33() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest34() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest35() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest36() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest37() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest38() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest39() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest40() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest41() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest42() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest43() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest44() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest45() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest46() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest47() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest48() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest49() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest50() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest51() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest52() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest53() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest54() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest55() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest56() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest57() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest58() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest59() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest60() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest61() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest62() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest63() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest64() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest65() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest66() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest67() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest68() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest69() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest70() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest71() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest72() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest73() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest74() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest75() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest76() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest77() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest78() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest79() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest80() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest81() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest82() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest83() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest84() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest85() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest86() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest87() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest88() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest89() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest90() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest91() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest92() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest93() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest94() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest95() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest96() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest97() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest98() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest99() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest100() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest101() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest102() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest103() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest104() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest105() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest106() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest107() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest108() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest109() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest110() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest111() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest112() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest113() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest114() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest115() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest116() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest117() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest118() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest119() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest120() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest121() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest122() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest123() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest124() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest125() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest126() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest127() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest128() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest129() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest130() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest131() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest132() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest133() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest134() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest135() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest136() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest137() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest138() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest139() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest140() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest141() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest142() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest143() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest144() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest145() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest146() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest147() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest148() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest149() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest150() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest151() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest152() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest153() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest154() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest155() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest156() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest157() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest158() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest159() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest160() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest161() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest162() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest163() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest164() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest165() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest166() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest167() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest168() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest169() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest170() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest171() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest172() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest173() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest174() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest175() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest176() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest177() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest178() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest179() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest180() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest181() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest182() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest183() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest184() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest185() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest186() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest187() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest188() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest189() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest190() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest191() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest192() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest193() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest194() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest195() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest196() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest197() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest198() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest199() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest200() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest201() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest202() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest203() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest204() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest205() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest206() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest207() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest208() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest209() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest210() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest211() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest212() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest213() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest214() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest215() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest216() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest217() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest218() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest219() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest220() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest221() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest222() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest223() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest224() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest225() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest226() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest227() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest228() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest229() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest230() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest231() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest232() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest233() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest234() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest235() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest236() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest237() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest238() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest239() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest240() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest241() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest242() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest243() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest244() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest245() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest246() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest247() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest248() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest249() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest250() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest251() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest252() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest253() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest254() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest255() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest256() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest257() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest258() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest259() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest260() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest261() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest262() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest263() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest264() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest265() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest266() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest267() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest268() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest269() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest270() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest271() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest272() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest273() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest274() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest275() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest276() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest277() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest278() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest279() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest280() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest281() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest282() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest283() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest284() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest285() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest286() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest287() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest288() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest289() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest290() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest291() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest292() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest293() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest294() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest295() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest296() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest297() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest298() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest299() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest300() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest301() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest302() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest303() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest304() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest305() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest306() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest307() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest308() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest309() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest310() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest311() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest312() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest313() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest314() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest315() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest316() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest317() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest318() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest319() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest320() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest321() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest322() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest323() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest324() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest325() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest326() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest327() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest328() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest329() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest330() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest331() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest332() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest333() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest334() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest335() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest336() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest337() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest338() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest339() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest340() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest341() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest342() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest343() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest344() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest345() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest346() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest347() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest348() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest349() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest350() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest351() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest352() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest353() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest354() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest355() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest356() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest357() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest358() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest359() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest360() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest361() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest362() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest363() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest364() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest365() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest366() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest367() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest368() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest369() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest370() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest371() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest372() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest373() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest374() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest375() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest376() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest377() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest378() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest379() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest380() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest381() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest382() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest383() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest384() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest385() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest386() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest387() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest388() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest389() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest390() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest391() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest392() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest393() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest394() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest395() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest396() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest397() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest398() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest399() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest400() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest401() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest402() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest403() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest404() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest405() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest406() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest407() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest408() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest409() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest410() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest411() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest412() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest413() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest414() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest415() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest416() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest417() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest418() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest419() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest420() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest421() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest422() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest423() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest424() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest425() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest426() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest427() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest428() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest429() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest430() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest431() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest432() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest433() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest434() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest435() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest436() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest437() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest438() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest439() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest440() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest441() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest442() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest443() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest444() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest445() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest446() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest447() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest448() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest449() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest450() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest451() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest452() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest453() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest454() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest455() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest456() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest457() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest458() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest459() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest460() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest461() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest462() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest463() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest464() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest465() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest466() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest467() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest468() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest469() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest470() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest471() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest472() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest473() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest474() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest475() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest476() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest477() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest478() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest479() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest480() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest481() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest482() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest483() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest484() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest485() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest486() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest487() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest488() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest489() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest490() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest491() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest492() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest493() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest494() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest495() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest496() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest497() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest498() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest499() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest500() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest501() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest502() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest503() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest504() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest505() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest506() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest507() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest508() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest509() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest510() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest511() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest512() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest513() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest514() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest515() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest516() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest517() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest518() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest519() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest520() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest521() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest522() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest523() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest524() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest525() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest526() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest527() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest528() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest529() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest530() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest531() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest532() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest533() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest534() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest535() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest536() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest537() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest538() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest539() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest540() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest541() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest542() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest543() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest544() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest545() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest546() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest547() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest548() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest549() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest550() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest551() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest552() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest553() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest554() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest555() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest556() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest557() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest558() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest559() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest560() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest561() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest562() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest563() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest564() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest565() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest566() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest567() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest568() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest569() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest570() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest571() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest572() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest573() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest574() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest575() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest576() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest577() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest578() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest579() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest580() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest581() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest582() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest583() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest584() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest585() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest586() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest587() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest588() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest589() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest590() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest591() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest592() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest593() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest594() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest595() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest596() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest597() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest598() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest599() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest600() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest601() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest602() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest603() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest604() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest605() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest606() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest607() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest608() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest609() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest610() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest611() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest612() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest613() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest614() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest615() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest616() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest617() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest618() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest619() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest620() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest621() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest622() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest623() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest624() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest625() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest626() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest627() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest628() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest629() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest630() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest631() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest632() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest633() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest634() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest635() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest636() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest637() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest638() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest639() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest640() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest641() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest642() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest643() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest644() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest645() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest646() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest647() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest648() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest649() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest650() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest651() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest652() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest653() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest654() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest655() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest656() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest657() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest658() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest659() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest660() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest661() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest662() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest663() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest664() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest665() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest666() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest667() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest668() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest669() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest670() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest671() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest672() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest673() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest674() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest675() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest676() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest677() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest678() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest679() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest680() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest681() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest682() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest683() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest684() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest685() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest686() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest687() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest688() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest689() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest690() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest691() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest692() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest693() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest694() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest695() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest696() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest697() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest698() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest699() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest700() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest701() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest702() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest703() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest704() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest705() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest706() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest707() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest708() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest709() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest710() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest711() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest712() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest713() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest714() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest715() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest716() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest717() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest718() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest719() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest720() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest721() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest722() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest723() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest724() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest725() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest726() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest727() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest728() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest729() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest730() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest731() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest732() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest733() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest734() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest735() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest736() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest737() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest738() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest739() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest740() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest741() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest742() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest743() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest744() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest745() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest746() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest747() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest748() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest749() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest750() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest751() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest752() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest753() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest754() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest755() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest756() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest757() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest758() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest759() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest760() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest761() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest762() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest763() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest764() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest765() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest766() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest767() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest768() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest769() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest770() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest771() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest772() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest773() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest774() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest775() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest776() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest777() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest778() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest779() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest780() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest781() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest782() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest783() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest784() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest785() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest786() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest787() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest788() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest789() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest790() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest791() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest792() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest793() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest794() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest795() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest796() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest797() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest798() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest799() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest800() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest801() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest802() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest803() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest804() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest805() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest806() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest807() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest808() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest809() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest810() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest811() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest812() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest813() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest814() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest815() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest816() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest817() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest818() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest819() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest820() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest821() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest822() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest823() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest824() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest825() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest826() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest827() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest828() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest829() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest830() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest831() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest832() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest833() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest834() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest835() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest836() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest837() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest838() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest839() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest840() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest841() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest842() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest843() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest844() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest845() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest846() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest847() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest848() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest849() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest850() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest851() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest852() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest853() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest854() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest855() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest856() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest857() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest858() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest859() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest860() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest861() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest862() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest863() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest864() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest865() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest866() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest867() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest868() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest869() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest870() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest871() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest872() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest873() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest874() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest875() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest876() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest877() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest878() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest879() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest880() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest881() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest882() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest883() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest884() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest885() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest886() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest887() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest888() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest889() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest890() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest891() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest892() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest893() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest894() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest895() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest896() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest897() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest898() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest899() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest900() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest901() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest902() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest903() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest904() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest905() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest906() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest907() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest908() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest909() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest910() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest911() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest912() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest913() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest914() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest915() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest916() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest917() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest918() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest919() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest920() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest921() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest922() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest923() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest924() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest925() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest926() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest927() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest928() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest929() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest930() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest931() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest932() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest933() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest934() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest935() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest936() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest937() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest938() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest939() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest940() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest941() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest942() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest943() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest944() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest945() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest946() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest947() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest948() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest949() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest950() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest951() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest952() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest953() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest954() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest955() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest956() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest957() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest958() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest959() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest960() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest961() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest962() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest963() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest964() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest965() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest966() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest967() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest968() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest969() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest970() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest971() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest972() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest973() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest974() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest975() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest976() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest977() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest978() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest979() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest980() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest981() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest982() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest983() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest984() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest985() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest986() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest987() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest988() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest989() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest990() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest991() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest992() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest993() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest994() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest995() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest996() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest997() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest998() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest999() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest1000() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest1001() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest1002() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
  func.func private @patternMatchingTest1003() -> () {
    %0 = call @giveI8() : () -> i8
    %1 = call @giveI8() : () -> i8
    %2 = call @giveI16() : () -> i16
    %3 = call @giveI16() : () -> i16
    %4 = call @giveI32() : () -> i32
    %5 = call @giveI32() : () -> i32
    %6 = call @giveI64() : () -> i64
    %7 = call @giveI64() : () -> i64
    %8 = "arith.addi"(%0, %1) : (i8, i8) -> i8
    %9 = "arith.addi"(%2, %3) : (i16, i16) -> i16
    %10 = "arith.addi"(%4, %5) : (i32, i32) -> i32
    %11 = "arith.addi"(%6, %7) : (i64, i64) -> i64
    %12 = "arith.constant"() <{value = 8 : i8}> : () -> i8
    %13 = "arith.constant"() <{value = 16 : i16}> : () -> i16
    %14 = "arith.constant"() <{value = 32 : i32}> : () -> i32
    %15 = "arith.constant"() <{value = 64 : i64}> : () -> i64
    %16 = "arith.addi"(%12, %0) : (i8, i8) -> i8
    %17 = "arith.addi"(%13, %2) : (i16, i16) -> i16
    %18 = "arith.addi"(%14, %4) : (i32, i32) -> i32
    %19 = "arith.addi"(%15, %6) : (i64, i64) -> i64
    %20 = "arith.addi"(%19, %19) : (i64, i64) -> i64
    %21 = "arith.addi"(%0, %12) : (i8, i8) -> i8
    %22 = "arith.addi"(%2, %13) : (i16, i16) -> i16
    %23 = "arith.addi"(%4, %14) : (i32, i32) -> i32
    %24 = "arith.addi"(%6, %15) : (i64, i64) -> i64
    %25 = "arith.cmpi"(%19, %15) <{predicate = 5 : i64}> : (i64, i64) -> i1
    %26 = "arith.extui"(%25) : (i1) -> i64
    %27 = "arith.constant"() <{value = 7 : i64}> : () -> i64
    %28 = "arith.andi"(%19, %27) : (i64, i64) -> i64
    %29 = "arith.shli"(%26, %28) : (i64, i64) -> i64
    "cf.cond_br"(%25)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb1:  // 2 preds: ^bb0, ^bb1
    %30 = "arith.cmpi"(%26, %29) <{predicate = 6 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%30)[^bb2, ^bb1] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  ^bb2:
    %31 = "arith.cmpi"(%26, %29) <{predicate = 0 : i64}> : (i64, i64) -> i1
    "cf.cond_br"(%31)[^bb1, ^bb2] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()
  }
}
